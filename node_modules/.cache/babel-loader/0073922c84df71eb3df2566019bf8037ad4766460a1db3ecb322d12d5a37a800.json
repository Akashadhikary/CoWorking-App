{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  centers: [],\n  status: 'idle',\n  error: null\n};\n\n// Define the async thunk to fetch centers\nexport const fetchCenters = createAsyncThunk('centers/fetchCenters', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await fetch('/data.json'); // fetch data from local data.json file\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return rejectWithValue('Failed to fetch centers data');\n  }\n});\nconst centersSlice = createSlice({\n  name: 'centers',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCenters.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(fetchCenters.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.centers = action.payload;\n    }).addCase(fetchCenters.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Unknown error';\n    });\n  }\n});\nexport default centersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","centers","status","error","fetchCenters","_","rejectWithValue","response","fetch","ok","Error","data","json","centersSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["C:/Users/Asus/Desktop/React Pojects/Figma Assesment/coworking-app/src/store/centersSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\ninterface Discount {\r\n  value: number;\r\n  message: string;\r\n}\r\n\r\ninterface Center {\r\n  id: string;\r\n  name: string;\r\n  address: string;\r\n  latitude: number;\r\n  longitude: number;\r\n  google_maps_url?: string;\r\n  city: string;\r\n  state: string;\r\n  country: string;\r\n  postal_code: string;\r\n  description?: string | null;\r\n  rules?: string | null;\r\n  amenities: string[];\r\n  images: string[];\r\n  working_hours_start: string;\r\n  working_hours_end: string;\r\n  contact_person_name?: string;\r\n  facilities?: string | null;\r\n  is_active: boolean;\r\n  is_day_pass_enabled: boolean;\r\n  day_pass_price: number;\r\n  day_pass_discounts_percentage: Record<string, Discount>;\r\n  manager_id?: string | null;\r\n}\r\n\r\ninterface CentersState {\r\n  centers: Center[];\r\n  status: string;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: CentersState = {\r\n  centers: [],\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\n// Define the async thunk to fetch centers\r\nexport const fetchCenters = createAsyncThunk<Center[], void, { rejectValue: string }>(\r\n  'centers/fetchCenters',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const response = await fetch('/data.json'); // fetch data from local data.json file\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data: Center[] = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      return rejectWithValue('Failed to fetch centers data');\r\n    }\r\n  }\r\n);\r\n\r\nconst centersSlice = createSlice({\r\n  name: 'centers',\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCenters.pending, (state) => {\r\n        state.status = 'loading';\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchCenters.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.centers = action.payload;\r\n      })\r\n      .addCase(fetchCenters.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.payload || 'Unknown error';\r\n      });\r\n  },\r\n});\r\n\r\nexport default centersSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAuChE,MAAMC,YAA0B,GAAG;EACjCC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGL,gBAAgB,CAC1C,sBAAsB,EACtB,OAAOM,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;IAC5C,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,MAAMC,IAAc,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC5C,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOR,KAAK,EAAE;IACd,OAAOG,eAAe,CAAC,8BAA8B,CAAC;EACxD;AACF,CACF,CAAC;AAED,MAAMO,YAAY,GAAGf,WAAW,CAAC;EAC/BgB,IAAI,EAAE,SAAS;EACfd,YAAY;EACZe,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,YAAY,CAACe,OAAO,EAAGC,KAAK,IAAK;MACxCA,KAAK,CAAClB,MAAM,GAAG,SAAS;MACxBkB,KAAK,CAACjB,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDe,OAAO,CAACd,YAAY,CAACiB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAClDF,KAAK,CAAClB,MAAM,GAAG,WAAW;MAC1BkB,KAAK,CAACnB,OAAO,GAAGqB,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC,CACDL,OAAO,CAACd,YAAY,CAACoB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAAClB,MAAM,GAAG,QAAQ;MACvBkB,KAAK,CAACjB,KAAK,GAAGmB,MAAM,CAACC,OAAO,IAAI,eAAe;IACjD,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeV,YAAY,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}