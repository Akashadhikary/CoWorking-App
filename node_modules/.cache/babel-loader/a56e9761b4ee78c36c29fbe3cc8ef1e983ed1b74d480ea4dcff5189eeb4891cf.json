{"ast":null,"code":"// // src/pages/Home.tsx\n// import React, { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { fetchCenters } from '../store/centersSlice';\n// import { RootState, AppDispatch } from '../store';\n// import CenterCard from '../components/CenterCard';\n// import { Grid, CircularProgress, Typography } from '@mui/material';\n\n// const Home: React.FC = () => {\n//   const dispatch: AppDispatch = useDispatch();\n//   const centers = useSelector((state: RootState) => state.centers.centers);\n//   const centerStatus = useSelector((state: RootState) => state.centers.status);\n//   const error = useSelector((state: RootState) => state.centers.error);\n\n//   useEffect(() => {\n//     if (centerStatus === 'idle') {\n//       dispatch(fetchCenters());\n//     }\n//   }, [centerStatus, dispatch]);\n\n//   let content;\n\n//   if (centerStatus === 'loading') {\n//     content = <CircularProgress />;\n//   } else if (centerStatus === 'succeeded') {\n//     content = (\n//       <Grid container spacing={3}>\n//         {centers.map((center) => (\n//           <Grid item key={center.id} xs={12} sm={6} md={4}>\n//             <CenterCard center={center} />\n//           </Grid>\n//         ))}\n//       </Grid>\n//     );\n//   } else if (centerStatus === 'failed') {\n//     content = <Typography color=\"error\">{error}</Typography>;\n//   }\n\n//   return <div>{content}</div>;\n// };\n\n// export default Home;","map":{"version":3,"names":[],"sources":["C:/Users/Asus/Desktop/React Pojects/Figma Assesment/coworking-app/src/pages/Home.tsx"],"sourcesContent":["// // src/pages/Home.tsx\r\n// import React, { useEffect } from 'react';\r\n// import { useDispatch, useSelector } from 'react-redux';\r\n// import { fetchCenters } from '../store/centersSlice';\r\n// import { RootState, AppDispatch } from '../store';\r\n// import CenterCard from '../components/CenterCard';\r\n// import { Grid, CircularProgress, Typography } from '@mui/material';\r\n\r\n// const Home: React.FC = () => {\r\n//   const dispatch: AppDispatch = useDispatch();\r\n//   const centers = useSelector((state: RootState) => state.centers.centers);\r\n//   const centerStatus = useSelector((state: RootState) => state.centers.status);\r\n//   const error = useSelector((state: RootState) => state.centers.error);\r\n\r\n//   useEffect(() => {\r\n//     if (centerStatus === 'idle') {\r\n//       dispatch(fetchCenters());\r\n//     }\r\n//   }, [centerStatus, dispatch]);\r\n\r\n//   let content;\r\n\r\n//   if (centerStatus === 'loading') {\r\n//     content = <CircularProgress />;\r\n//   } else if (centerStatus === 'succeeded') {\r\n//     content = (\r\n//       <Grid container spacing={3}>\r\n//         {centers.map((center) => (\r\n//           <Grid item key={center.id} xs={12} sm={6} md={4}>\r\n//             <CenterCard center={center} />\r\n//           </Grid>\r\n//         ))}\r\n//       </Grid>\r\n//     );\r\n//   } else if (centerStatus === 'failed') {\r\n//     content = <Typography color=\"error\">{error}</Typography>;\r\n//   }\r\n\r\n//   return <div>{content}</div>;\r\n// };\r\n\r\n// export default Home;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}